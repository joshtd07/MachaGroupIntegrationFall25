import React, { useState, useEffect } from 'react';
import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';
import { useNavigate } from 'react-router-dom';
import { useBuilding } from '../Context/BuildingContext';
import './FormQuestions.css';
import logo from '../assets/MachaLogo.png';
import Navbar from "./Navbar";
import { getFunctions, httpsCallable } from "firebase/functions";

function MalwareRemovalToolsPage() {
    const navigate = useNavigate();
    const { buildingId } = useBuilding();
    const db = getFirestore();
    const functions = getFunctions();
    const uploadImage = httpsCallable(functions, 'uploadMalwareRemovalToolsPageImage');

    const [formData, setFormData] = useState({});
    const [imageData, setImageData] = useState(null);
    const [imageUrl, setImageUrl] = useState(null);
    const [imageUploadError, setImageUploadError] = useState(null);
    const [loading, setLoading] = useState(true);
    const [loadError, setLoadError] = useState(null);

    useEffect(() => {
        if (!buildingId) {
            alert('No building selected. Redirecting to Building Info...');
            navigate('BuildingandAddress');
            return;
        }

        const fetchFormData = async () => {
            setLoading(true);
            setLoadError(null);

            try {
                const formDocRef = doc(db, 'forms', 'Cybersecurity', 'Malware Removal Tools', buildingId);
                const docSnapshot = await getDoc(formDocRef);

                if (docSnapshot.exists()) {
                    setFormData(docSnapshot.data().formData || {});
                } else {
                    setFormData({});
                }
            } catch (error) {
                console.error("Error fetching form data:", error);
                setLoadError("Failed to load form data. Please try again.");
            } finally {
                setLoading(false);
            }
        };

        fetchFormData();
    }, [buildingId, db, navigate]);

    const handleChange = async (e) => {
        const { name, value } = e.target;
        const newFormData = { ...formData, [name]: value };
        setFormData(newFormData);
 
        try {
            const buildingRef = doc(db, 'Buildings', buildingId); // Create buildingRef
            const formDocRef = doc(db, 'forms', 'Cybersecurity', 'Malware Removal Tools', buildingId);
            await setDoc(formDocRef, { formData: { ...newFormData, building: buildingRef } }, { merge: true }); // Use merge and add building
            console.log("Form data saved to Firestore:", { ...newFormData, building: buildingRef });
        } catch (error) {
            console.error("Error saving form data to Firestore:", error);
            alert("Failed to save changes. Please check your connection and try again.");
        }
    };

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
            setImageData(reader.result);
        };
        reader.readAsDataURL(file);
    };

    const handleBack = () => {
        navigate(-1);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!buildingId) {
            alert('Building ID is missing. Please start from the Building Information page.');
            return;
        }

        if (imageData) {
            try {
                const uploadResult = await uploadImage({ imageData: imageData });
                setImageUrl(uploadResult.data.imageUrl);
                setFormData({ ...formData, imageUrl: uploadResult.data.imageUrl });
                setImageUploadError(null);
            } catch (error) {
                console.error('Error uploading image:', error);
                setImageUploadError(error.message);
            }
        }

        try {
            const formDocRef = doc(db, 'forms', 'Cybersecurity', 'Malware Removal Tools', buildingId);
            await setDoc(formDocRef, { formData: formData }, { merge: true });
            console.log('Form data submitted successfully!');
            alert('Form submitted successfully!');
            navigate('/Form');
        } catch (error) {
            console.error("Error saving form data to Firestore:", error);
            alert("Failed to save changes. Please check your connection and try again.");
        }
    };

    if (loading) {
        return <div>Loading...</div>;
    }

    if (loadError) {
        return <div>Error: {loadError}</div>;
    }

    return (
        <div className="form-page">
            <header className="header">
                <Navbar />
                <button className="back-button" onClick={handleBack}>‚Üê</button>
                <h1>Malware Removal Tools Assessment</h1>
                <img src={logo} alt="Logo" className="logo" />
            </header>

            <main className="form-container">
                <form onSubmit={handleSubmit}>
                    <h2>4.1.2.1.2.1 Detection and Quarantine Capabilities:</h2>
                    {[
                        { name: "detectionEffectiveness", label: "How effective are the malware removal tools at detecting various types of malware, including viruses, Trojans, worms, ransomware, and spyware?" },
                        { name: "quarantineProcess", label: "What is the process for quarantining suspicious files, and does the tool allow for manual quarantine overrides or adjustments?" },
                        { name: "scanningOptions", label: "Are there options for automatic and manual scanning to identify and isolate malicious software in real time or during scheduled scans?" },
                    ].map((question, index) => (
                        <div key={index} className="form-section">
                            <label>{question.label}</label>
                            {question.name === "scanningOptions" ? (
                                <><div>
                                    <input type="radio" name={question.name} value="Yes" checked={formData[question.name] === "Yes"} onChange={handleChange} /> Yes
                                    <input type="radio" name={question.name} value="No" checked={formData[question.name] === "No"} onChange={handleChange} /> No
                                </div><input type="text" name={`${question.name}Comment`} placeholder="Comment (Optional)" value={formData[`${question.name}Comment`] || ''} onChange={handleChange} /></>

                            ) : (
                                <textarea name={question.name} value={formData[question.name] || ''} onChange={handleChange}></textarea>
                            )}
                        </div>
                    ))}

                    <h2>4.1.2.1.2.2 Removal and Cleanup Effectiveness:</h2>
                    {[
                        { name: "removalThoroughness", label: "How thorough is the malware removal process in eliminating all traces of an infection, including registry entries, temporary files, and hidden components?" },
                        { name: "removalGuide", label: "Does the tool provide a step-by-step guide or automated process for safely removing malware without affecting the system's stability or other applications?" },
                        { name: "complexThreats", label: "Are there specific tools or capabilities to handle complex or persistent threats, such as rootkits or deeply embedded malware?" },
                    ].map((question, index) => (
                        <div key={index + 3} className="form-section">
                            <label>{question.label}</label>
                            <textarea name={question.name} value={formData[question.name] || ''} onChange={handleChange}></textarea>
                        </div>
                    ))}

                    <h2>4.1.2.1.2.3 User and Administrator Control:</h2>
                    {[
                        { name: "userAdminControl", label: "Can users and administrators configure the level of automated actions versus manual intervention for detected threats?" },
                        { name: "detailedLogs", label: "Does the tool provide detailed logs and reports on quarantined and removed malware, including the nature of the threat, affected files, and actions taken?" },
                        { name: "customPolicies", label: "Are there customizable policies for different user roles or groups, allowing for varying levels of access and control over malware removal actions?" },
                    ].map((question, index) => (
                        <div key={index + 6} className="form-section">
                            <label>{question.label}</label>
                            {question.name === "customPolicies" ? (
                                <><div>
                                    <input type="radio" name={question.name} value="Yes" checked={formData[question.name] === "Yes"} onChange={handleChange} /> Yes
                                    <input type="radio" name={question.name} value="No" checked={formData[question.name] === "No"} onChange={handleChange} /> No
                                </div><input type="text" name={`${question.name}Comment`} placeholder="Comment (Optional)" value={formData[`${question.name}Comment`] || ''} onChange={handleChange} /></>

                            ) : (
                                <textarea name={question.name} value={formData[question.name] || ''} onChange={handleChange}></textarea>
                            )}
                        </div>
                    ))}

                    <h2>4.1.2.1.2.4 Integration with Other Security Systems:</h2>
                    {[
                        { name: "integrationWithSecurity", label: "How well does the malware removal tool integrate with other endpoint security solutions, such as antivirus software, firewalls, and intrusion detection systems?" },
                        { name: "centralizedManagementIntegration", label: "Does the tool support integration with centralized management platforms to provide unified monitoring and response across multiple endpoints?" },
                        { name: "threatDataSharing", label: "Can the malware removal tool share threat data and removal outcomes with other security systems to enhance overall threat intelligence and response strategies?" },
                    ].map((question, index) => (
                        <div key={index + 9} className="form-section">
                            <label>{question.label}</label>
                            <textarea name={question.name} value={formData[question.name] || ''} onChange={handleChange}></textarea>
                        </div>
                    ))}

                    <h2>4.1.2.1.2.5 Updates and Maintenance:</h2>
                    {[
                        { name: "updateFrequency", label: "How frequently are the malware removal tools updated to recognize and effectively deal with the latest threats and malware variants?" },
                        { name: "autoUpdateProcess", label: "Is there a process for automatically applying updates to ensure that the tools remain effective against emerging threats?" },
                        { name: "feedbackUtilization", label: "How is user and system feedback utilized to improve the effectiveness and efficiency of the malware removal tools over time?" },
                    ].map((question, index) => (
                        <div key={index + 12} className="form-section">
                            <label>{question.label}</label>
                            {question.name === "autoUpdateProcess" ? (
                                <><div>
                                    <input type="radio" name={question.name} value="Yes" checked={formData[question.name] === "Yes"} onChange={handleChange} /> Yes
                                    <input type="radio" name={question.name} value="No" checked={formData[question.name] === "No"} onChange={handleChange} /> No
                                </div><input type="text" name={`${question.name}Comment`} placeholder="Comment (Optional)" value={formData[`${question.name}Comment`] || ''} onChange={handleChange} /></>

                            ) : (
                                <textarea name={question.name} value={formData[question.name] || ''} onChange={handleChange}></textarea>
                            )}
                        </div>
                    ))}

                    <input type="file" accept="image/*" onChange={handleImageChange} />
                    {imageUrl && <img src={imageUrl} alt="Uploaded Image" />}
                    {imageUploadError && <p style={{ color: "red" }}>{imageUploadError}</p>}
                    <button type="submit">Submit</button>
                </form>
            </main>
        </div>
    );
}

export default MalwareRemovalToolsPage;